version: '3.8'
services:
  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: FinancialService
    ports:
      - "61000:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_network

  redis:
    image: redis:6.2-alpine
    ports:
      - "61005:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_network

  api:
    build:
      context: .
      dockerfile: FinancialDataService.Api/Dockerfile
    ports:
      - "61001:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=FinancialService;Username=postgres;Password=postgres
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - api_app:/app
    networks:
      - financial_network

  jobs:
    build:
      context: .
      dockerfile: FinancialDataService.Jobs/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=FinancialService;Username=postgres;Password=postgres
      - BinanceSettings__RestApiBaseUrl=https://api.binance.com/api/v3
      - BinanceSettings__WebSocketBaseUrl=wss://stream.binance.com:9443/stream
      - GlobalProviderSettings__FetchInstrumentsJobCronExpression=0 * * * * ?
      - GlobalProviderSettings__SupportedSymbols__0=BTCUSDT
      - GlobalProviderSettings__SupportedSymbols__1=ETHUSDT
      - GlobalProviderSettings__SupportedSymbols__2=BNBUSDT
      - RedisBackplaneSettings__ConnectionString=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - jobs_app:/app
    networks:
      - financial_network

  streams:
    build:
      context: .
      dockerfile: FinancialDataService.Streams/Dockerfile
    ports:
      - "61002:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5001
      - ConnectionStrings__Postgres=Host=postgres;Port=5432;Database=FinancialService;Username=postgres;Password=postgres
      - RedisBackplaneSettings__ConnectionString=redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - streams_app:/app
    networks:
      - financial_network

  demoapp:
    build:
      context: .
      dockerfile: FinancialDataService.DemoUI/Dockerfile
    ports:
      - "61004:5002"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5002
      - Connections__ApiBaseUrl=http://api:5000/api/v1
      - Connections__HubUrl=http://streams:5001/priceHub
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
      streams:
        condition: service_started
    volumes:
      - demoapp_app:/app
    networks:
      - financial_network

networks:
  financial_network:
    driver: bridge

volumes:
  api_app:
  jobs_app:
  streams_app:
  demoapp_app: